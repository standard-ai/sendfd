name: Test sendfd

on:
  push:
    paths-ignore:
    - '*.mkd'
    - 'LICENSE'
  pull_request:

jobs:
  native-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        rust_toolchain: [nightly, stable, 1.70.0]
        os: [ubuntu-latest, macOS-latest]
        flags: ["--all-features", "--all-features --release", ""]
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust_toolchain }}
        uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ matrix.rust_toolchain }}
            profile: minimal
            default: true
      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: ${{ matrix.flags }} --manifest-path=Cargo.toml -- --nocapture

  bare-cross-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust_target:
          # BSDs: could be tested with full system emulation
          # - x86_64-unknown-dragonfly
          # - x86_64-unknown-freebsd
          # - x86_64-unknown-haiku
          # - x86_64-unknown-netbsd
          - x86_64-unknown-openbsd
          # - x86_64-unknown-redox
          # - x86_64-fuchsia
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            profile: minimal
            default: true
      - name: Fix-up toolchain
        run: |
            rustup component add rust-src --toolchain nightly --target ${{ matrix.rust_target }}
      - name: Update
        uses: actions-rs/cargo@v1
        with:
          command: update
          args: --manifest-path=Cargo.toml
      - name: Build ${{ matrix.rust_target }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.rust_target }} --manifest-path=Cargo.toml -Zbuild-std

  cross-ios-build:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        rust_toolchain: [nightly, stable]
        rust_target:
          - aarch64-apple-ios
          - x86_64-apple-ios
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust_toolchain }}
        uses: actions-rs/toolchain@v1
        with:
            toolchain: ${{ matrix.rust_toolchain }}
            target: ${{ matrix.rust_target }}
            profile: minimal
            default: true
      - name: Update
        uses: actions-rs/cargo@v1
        with:
          command: update
          args: --manifest-path=Cargo.toml
      - name: Build ${{ matrix.rust_target }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target=${{ matrix.rust_target }} --manifest-path=Cargo.toml
